üß™ Full-Stack Developer Assignment: Mini Inventory Management System
‚è± Duration: 2.5 hours
Environment: Use any online IDE (e.g., Replit, Bolt, CodeSandbox) with support for Node.js, Python, or your preferred full-stack framework.
Proctoring: You will be screensharing during the test. Make sure your internet and mic are working.
________________________________________
üß© Problem Statement
Build a Mini Inventory Management System for a small warehouse. The system should support the following:
Core Requirements:
1.	Authentication (Optional but Bonus)
o	Simple login screen (no need for real auth ‚Äî hardcoded user is fine)
2.	Products
o	Add a new product: name, SKU, category, initial stock
o	Update a product‚Äôs stock (Add or Subtract quantity)
o	List all products with current stock
3.	Transactions
o	Record transactions (either IN or OUT) for a product
o	Show transaction history per product
o	Each transaction has: product_id, type (IN/OUT), quantity, timestamp
4.	Basic UI
o	UI should allow:
ÔÇß	Adding/editing products
ÔÇß	Adjusting stock via transactions
ÔÇß	Viewing product list with current stock
ÔÇß	Viewing transaction history for a selected product
________________________________________
üîß Technical Expectations
‚Ä¢	Use a lightweight backend (Node.js + Express, Python Flask/FastAPI, etc.)
‚Ä¢	Use an in-memory DB (e.g., SQLite, JSON file, or arrays/objects in memory) OR any DB of your choice if easy to set up
‚Ä¢	Frontend using HTML/CSS + JS, or frameworks like React/Vue/Svelte
‚Ä¢	APIs for:
o	GET/POST products
o	POST transaction
o	GET product-wise transaction history
________________________________________
üì¶ Suggested Schema (You can deviate if justified)
Product
‚Ä¢	id (string or number)
‚Ä¢	name
‚Ä¢	sku
‚Ä¢	category
‚Ä¢	current_stock
Transaction
‚Ä¢	id
‚Ä¢	product_id (FK)
‚Ä¢	type (IN/OUT)
‚Ä¢	quantity
‚Ä¢	timestamp
________________________________________
üìù What We‚Äôre Looking For
‚Ä¢	Clean code structure and separation of concerns
‚Ä¢	RESTful API design
‚Ä¢	DB schema design sense
‚Ä¢	Frontend usability (basic but functional UI)
‚Ä¢	Error handling and edge-case thinking
‚Ä¢	Use of async operations if applicable
________________________________________
üöÄ Bonus (if time permits)
‚Ä¢	Simple login functionality with hardcoded credentials
‚Ä¢	Filtering products by category
‚Ä¢	Sorting transaction history by date
________________________________________
üì§ Submission
At the end of 2.5 hours, share:
‚Ä¢	A public link to your project
o	Host the build version on any free hosting platform and send us the link to login page
‚Ä¢	Any notes or assumptions you made
‚Ä¢	Short README (even inline) on how to run/test

